<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020CCPC长春F-Strange Memory</title>
    <link href="/2021/03/29/ccpc-changchun-F/"/>
    <url>/2021/03/29/ccpc-changchun-F/</url>
    
    <content type="html"><![CDATA[<h1 id="F-Strange-Memory"><a href="#F-Strange-Memory" class="headerlink" title="F. Strange Memory"></a><a href="https://codeforces.cc/gym/102832/problem/F" target="_blank" rel="noopener">F. Strange Memory</a></h1><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给出一棵树，若树中两点满足其点权异或值为其lca的点权，那么对答案贡献其编号异或值，求贡献总和</p><h4 id="关键词："><a href="#关键词：" class="headerlink" title="关键词："></a>关键词：</h4><p>DSU on Tree</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>考虑暴力，答案的贡献可以通过某个节点的子树两两统计后得出，复杂度$O(n^2)$。</p><p>DSU on Tree适合解决子树信息统计类问题，对于每个子树，只需要暴力统计其所有轻儿子的答案，最后统计重儿子并且不删去贡献即可，注意本题的lca不可以为节点自身，且要注意权值异或后的数组溢出问题，把每个数拆成20位分别统计贡献即可。复杂度$O(nlog_n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sz(x) ((int)(x).size())</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> see(x) cerr&lt;&lt;(#x)&lt;&lt;<span class="hljs-meta-string">'='</span>&lt;&lt;(x)&lt;&lt;endl</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&lt;b)a=b;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">if</span>(a&gt;b)a=b;&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> base=<span class="hljs-number">231</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> logn=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;g[maxn];<br><span class="hljs-keyword">int</span> n,a[maxn],son[maxn],sz[maxn],cnt[<span class="hljs-number">1000005</span>][<span class="hljs-number">22</span>][<span class="hljs-number">2</span>];<br>ll ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa)</span></span>&#123;<br>    sz[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(u==fa) <span class="hljs-keyword">continue</span>;<br>        dfs(u,x);<br>        sz[x]+=sz[u];<br>        <span class="hljs-keyword">if</span>(sz[u]&gt;sz[son[x]]) son[x]=u;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> rt)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>((a[x]^a[rt])&lt;=<span class="hljs-number">1000000</span>)<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">20</span>;i++) ans+=<span class="hljs-number">1l</span>l*cnt[a[x]^a[rt]][i][((x&gt;&gt;i)&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>&lt;&lt;i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(u==fa) <span class="hljs-keyword">continue</span>;<br>        get(u,x,rt);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">20</span>;i++) cnt[a[x]][i][(x&gt;&gt;i)&amp;<span class="hljs-number">1</span>]+=v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(u==fa) <span class="hljs-keyword">continue</span>;<br>        cal(u,x,v);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">bool</span> f)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(u==fa||u==son[x]) <span class="hljs-keyword">continue</span>;<br>        dfs(u,x,<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(son[x]) dfs(son[x],x,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(u==fa||u==son[x]) <span class="hljs-keyword">continue</span>;<br>        get(u,x,x);<br>        cal(u,x,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">20</span>;i++) cnt[a[x]][i][(x&gt;&gt;i)&amp;<span class="hljs-number">1</span>]++;<br>    <span class="hljs-keyword">if</span>(!f) cal(x,fa,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        g[x].push_back(y);<br>        g[y].push_back(x);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">cout</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//    cin&gt;&gt;_;</span><br><span class="hljs-comment">//    int cas=0;</span><br>    <span class="hljs-keyword">while</span>(_--)&#123;<br>        <span class="hljs-comment">//cout&lt;&lt;"Case #"&lt;&lt;++cas&lt;&lt;": ";</span><br>        solve();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020jscpc部分题解</title>
    <link href="/2021/01/10/jcpc/"/>
    <url>/2021/01/10/jcpc/</url>
    
    <content type="html"><![CDATA[<h1 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a><a href="https://codeforces.com/gym/102875" target="_blank" rel="noopener">比赛链接</a></h1><h1 id="A-Array"><a href="#A-Array" class="headerlink" title="A - Array"></a><a href="https://codeforces.com/gym/102875/problem/A" target="_blank" rel="noopener">A - Array</a></h1><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给出一个序列以及一系列操作与询问，通篇四个大字：数据结构。</p><h4 id="关键词："><a href="#关键词：" class="headerlink" title="关键词："></a>关键词：</h4><p>线段树</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>观察到题目给的模数很小，且根据修改操作的性质，对区间修改实际上就是对0~p的数的个数进行修改，因此可以建一棵存放p个节点的线段树，每次修改就是修改每个数出现的次数即可，懒惰标记存放的是每个数对应的映射。难点在于懒惰标记下放时需要对其进行叠加而不是覆盖。复杂度$O(q\times p\times log(n))$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> n,m,a[maxn],q;<br><span class="hljs-keyword">int</span> tmp[<span class="hljs-number">31</span>];<br><span class="hljs-function">ll <span class="hljs-title">qsm</span><span class="hljs-params">(ll x,ll b)</span></span>&#123;<br>    ll res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=(res*x)%m;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>        x=x*x%m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t[maxn&lt;&lt;<span class="hljs-number">2</span>][<span class="hljs-number">31</span>];<br>    <span class="hljs-keyword">int</span> lz[maxn&lt;&lt;<span class="hljs-number">2</span>][<span class="hljs-number">31</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>           t[p][i]=t[p&lt;&lt;<span class="hljs-number">1</span>][i]+t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(lz[p][<span class="hljs-number">0</span>]==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[lz[p][i]]+=t[p&lt;&lt;<span class="hljs-number">1</span>][i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) t[p&lt;&lt;<span class="hljs-number">1</span>][i]=tmp[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[lz[p][i]]+=t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i]=tmp[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(lz[p&lt;&lt;<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">-1</span>) lz[p&lt;&lt;<span class="hljs-number">1</span>][i]=lz[p][i];<br>            <span class="hljs-keyword">else</span> lz[p&lt;&lt;<span class="hljs-number">1</span>][i]=lz[p][lz[p&lt;&lt;<span class="hljs-number">1</span>][i]];<br>            <span class="hljs-keyword">if</span>(lz[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">-1</span>) lz[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i]=lz[p][i];<br>            <span class="hljs-keyword">else</span> lz[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i]=lz[p][lz[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>][i]];<br>        &#125;<br>        lz[p][<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_lazy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp;v)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            lz[p][i]=v[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) tmp[v[i]]+=t[p][i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) t[p][i]=tmp[i];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        lz[p][<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            t[p][a[l]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(p&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        push_up(p,l,r);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;v)</span></span>&#123;<br>        push_down(p,l,r);<br>        <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)&#123;<br>            set_lazy(p,l,r,v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid) update(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr,v);<br>        <span class="hljs-keyword">if</span>(qr&gt;mid) update(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr,v);<br>        push_up(p,l,r);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; v)</span></span>&#123;<br>        push_down(p,l,r);<br>        <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]+=t[p][i];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid) query(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr,v);<br>        <span class="hljs-keyword">if</span>(qr&gt;mid) query(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr,v);<br>    &#125;<br>&#125;seg;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> debug=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        a[i]%=m;<br>    &#125;<br>    seg.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;q;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v(m);<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-keyword">int</span> t,l,r,k;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;t&gt;&gt;l&gt;&gt;r&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(debug)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="hljs-string">"!"</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=<span class="hljs-number">0</span>;<br>            seg.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n,v);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">":"</span>&lt;&lt;v[i]&lt;&lt;<span class="hljs-string">" "</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)&#123;<br>            k%=m;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=(i+k)%m;<br>            seg.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,v);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-number">2</span>)&#123;<br>            k%=m;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=(i*k)%m;<br>            seg.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,v);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=qsm(i,k);<br>            seg.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,v);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=<span class="hljs-number">0</span>;<br>            seg.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,v);<br>            ll ans=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) ans=(ans+qsm(i,k)*v[i])%m;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">'\n'</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) v[i]=<span class="hljs-number">0</span>;<br>            seg.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,v);<br>            ll ans=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) ans=(ans*qsm(i,v[i]))%m;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">'\n'</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-comment">//cin&gt;&gt;_;</span><br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Delete-Prime"><a href="#D-Delete-Prime" class="headerlink" title="D - Delete Prime"></a><a href="https://codeforces.com/gym/102875/problem/D" target="_blank" rel="noopener">D - Delete Prime</a></h1><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>1到n的排列，每次将质数位的数取出自成一队，剩余的数重复以上操作至序列为空。</p><h4 id="关键词：-1"><a href="#关键词：-1" class="headerlink" title="关键词："></a>关键词：</h4><p>质数的密度性，素数筛，二分/离线处理</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>根据质数的密度性，每次取出的数接将近size/2个，因此队列的总数约为$log_n$个，因此预处理出素数下标，暴力取数并标记每个数的队列号与在队列中的下标，每次询问可以选择离线处理或二分。复杂度$O(T*(log_n)^2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pii;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">query</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t,k,n;<br>    <span class="hljs-keyword">int</span> in;<br>&#125;a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(query a,query b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.n&lt;b.n;<br>&#125;<br><span class="hljs-keyword">bool</span> isp[maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v[<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> out[maxn];<br><span class="hljs-keyword">int</span> belong[maxn],id[maxn],cnt[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;maxn;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!isp[i])&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j*i&lt;maxn;j++)&#123;<br>                isp[j*i]=<span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1e6</span>;i++) t.push_back(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r=<span class="hljs-number">1</span>;!t.empty();r++)&#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;tt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t.size();i++)&#123;<br>            <span class="hljs-keyword">if</span>(!isp[i+<span class="hljs-number">1</span>]) &#123;<br>                belong[t[i]]=r;<br>                id[t[i]]=++cnt[r];<br>            &#125;<br>            <span class="hljs-keyword">else</span> tt.push_back(t[i]);<br>        &#125;<br>        t=tt;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i].t&gt;&gt;a[i].n&gt;&gt;a[i].k;<br>        a[i].in=i;<br>    &#125;<br>    sort(a,a+t,cmp);<br>    <span class="hljs-keyword">int</span> now=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br>        <span class="hljs-keyword">while</span>(now&lt;a[i].n)&#123;<br>            now++;<br>            v[belong[now]].push_back(now);<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(a[i].t==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">int</span> r=belong[a[i].k];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;r;j++) ans+=v[j].size();<br>            ans+=id[a[i].k];<br>            out[a[i].in]=ans;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;;j++)&#123;<br>                <span class="hljs-keyword">if</span>(a[i].k&gt;v[j].size()) a[i].k-=v[j].size();<br>                <span class="hljs-keyword">else</span> &#123;<br>                    out[a[i].in]=v[j][a[i].k<span class="hljs-number">-1</span>];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++) <span class="hljs-built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    init();<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-comment">//cin&gt;&gt;_;</span><br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-Happy-Morse-Code"><a href="#H-Happy-Morse-Code" class="headerlink" title="H - Happy Morse Code"></a><a href="https://codeforces.com/gym/102875/problem/H" target="_blank" rel="noopener">H - Happy Morse Code</a></h1><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>给出不超过26个长度不超过5的字符串，以及一个匹配串，问这些字符串能够拼出多少种匹配串。</p><h4 id="关键词：-2"><a href="#关键词：-2" class="headerlink" title="关键词："></a>关键词：</h4><p>线性dp</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>因为每个匹配串很短，直接暴力匹配后dp即可，这里需要注意因为模数为128，因此会出现dp值为0的情况，因此需要再用一个标记符表示该位dp值是否大于1，复杂度$O(n*m)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">128</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;s(m+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;dp(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;fl(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;se;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;s[i];<br>        se.insert(s[i]);<br>        <span class="hljs-built_in">cin</span>&gt;&gt;s[i];<br>    &#125;<br>    assert(se.size()==m);<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    fl[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">string</span> a;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            <span class="hljs-keyword">int</span> f=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(s[j].length()&lt;=i+<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;s[j].length();k++)&#123;<br>                    <span class="hljs-keyword">if</span>(a[i+k-s[j].length()+<span class="hljs-number">1</span>]!=s[j][k]) f=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(!f) &#123;<br>                    dp[i+<span class="hljs-number">1</span>]=dp[i+<span class="hljs-number">1</span>]+dp[i+<span class="hljs-number">1</span>-s[j].length()];<br>                    <span class="hljs-keyword">if</span>(fl[i+<span class="hljs-number">1</span>-s[j].length()]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(fl[i+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>) fl[i+<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fl[i+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>) fl[i+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fl[i+<span class="hljs-number">1</span>-s[j].length()]==<span class="hljs-number">2</span>)&#123;<br>                        fl[i+<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>                    &#125;<br>                    dp[i+<span class="hljs-number">1</span>]%=mod;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(fl[n]==<span class="hljs-number">0</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"nonono\n"</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fl[n]==<span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"happymorsecode\n"</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"puppymousecat"</span>&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;dp[n]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I-Intersections"><a href="#I-Intersections" class="headerlink" title="I - Intersections"></a><a href="https://codeforces.com/gym/102875/problem/I" target="_blank" rel="noopener">I - Intersections</a></h1><h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>给出一个网格图，起点和终点，每个点在某些时间段可以上下或左右走，且走动需要一定时间，问最早到达终点的时间。</p><h4 id="关键词：-3"><a href="#关键词：-3" class="headerlink" title="关键词："></a>关键词：</h4><p>最短路</p><h4 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h4><p>比较经典的网格图最短路模型，因为每个点最多只有上下左右四条边，建图跑迪杰斯特拉即可。</p><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5e2</span>+<span class="hljs-number">5</span>;<br>ll a[maxn][maxn],b[maxn][maxn],c[maxn][maxn],w[maxn][maxn],dis[maxn][maxn];<br><span class="hljs-keyword">int</span> n,m,xs,xt,ys,yt;<br><span class="hljs-keyword">int</span> vis[maxn][maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    ll d;<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node&amp; u) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> d&gt;u.d;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br>    priority_queue&lt;node&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) dis[i][j]=<span class="hljs-number">1e18</span>;<br>    dis[xs][xt]=<span class="hljs-number">0</span>;<br>    q.push(&#123;<span class="hljs-number">0</span>,xs,xt&#125;);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br>        node node=q.top();q.pop();<br>        <span class="hljs-keyword">int</span> x=node.x,y=node.y;<br>        ll d=node.d;<br>        <span class="hljs-keyword">if</span>(vis[x][y]) <span class="hljs-keyword">continue</span>;<br>        vis[x][y]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(d%(a[x][y]+b[x][y])&lt;a[x][y]) &#123;<br>                ll dd=d+w[x<span class="hljs-number">-1</span>][y];<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x<span class="hljs-number">-1</span>][y])&#123;<br>                    dis[x<span class="hljs-number">-1</span>][y]=dd;<br>                    q.push(&#123;dd,x<span class="hljs-number">-1</span>,y&#125;);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll dd=d+w[x<span class="hljs-number">-1</span>][y]+a[x][y]+b[x][y]-d%(a[x][y]+b[x][y]);<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x<span class="hljs-number">-1</span>][y])&#123;<br>                    dis[x<span class="hljs-number">-1</span>][y]=dd;<br>                    q.push(&#123;dd,x<span class="hljs-number">-1</span>,y&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(d%(a[x][y]+b[x][y])&lt;a[x][y]) &#123;<br>                ll dd=d+w[x][y];<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x+<span class="hljs-number">1</span>][y])&#123;<br>                    dis[x+<span class="hljs-number">1</span>][y]=dd;<br>                    q.push(&#123;dd,x+<span class="hljs-number">1</span>,y&#125;);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll dd=d+w[x][y]+a[x][y]+b[x][y]-d%(a[x][y]+b[x][y]);<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x+<span class="hljs-number">1</span>][y])&#123;<br>                    dis[x+<span class="hljs-number">1</span>][y]=dd;<br>                    q.push(&#123;dd,x+<span class="hljs-number">1</span>,y&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(d%(a[x][y]+b[x][y])&gt;=a[x][y]) &#123;<br>                ll dd=d+c[x][y<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x][y<span class="hljs-number">-1</span>])&#123;<br>                    dis[x][y<span class="hljs-number">-1</span>]=dd;<br>                    q.push(&#123;dd,x,y<span class="hljs-number">-1</span>&#125;);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll dd=d+c[x][y<span class="hljs-number">-1</span>]+a[x][y]-d%(a[x][y]+b[x][y]);<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x][y<span class="hljs-number">-1</span>])&#123;<br>                    dis[x][y<span class="hljs-number">-1</span>]=dd;<br>                    q.push(&#123;dd,x,y<span class="hljs-number">-1</span>&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y&lt;m)&#123;<br>            <span class="hljs-keyword">if</span>(d%(a[x][y]+b[x][y])&gt;=a[x][y]) &#123;<br>                ll dd=d+c[x][y];<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x][y+<span class="hljs-number">1</span>])&#123;<br>                    dis[x][y+<span class="hljs-number">1</span>]=dd;<br>                    q.push(&#123;dd,x,y+<span class="hljs-number">1</span>&#125;);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll dd=d+c[x][y]+a[x][y]-d%(a[x][y]+b[x][y]);<br>                <span class="hljs-keyword">if</span>(dd&lt;dis[x][y+<span class="hljs-number">1</span>])&#123;<br>                    dis[x][y+<span class="hljs-number">1</span>]=dd;<br>                    q.push(&#123;dd,x,y+<span class="hljs-number">1</span>&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;xs&gt;&gt;xt&gt;&gt;ys&gt;&gt;yt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;b[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;m;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;c[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;w[i][j];<br>    dij();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dis[ys][yt]&lt;&lt;<span class="hljs-string">'\n'</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-comment">//cin&gt;&gt;_;</span><br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K-Kanade-Hates-Recruitment"><a href="#K-Kanade-Hates-Recruitment" class="headerlink" title="K - Kanade Hates Recruitment"></a><a href="https://codeforces.com/gym/102875/problem/K" target="_blank" rel="noopener">K - Kanade Hates Recruitment</a></h1><h4 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h4><p>给出n个01串，你可以选择一个字符串，并且切出一个非空后缀为第n+1个01串，问n+1个01串异或值为0的切法有多少种？</p><h4 id="关键词：-4"><a href="#关键词：-4" class="headerlink" title="关键词："></a>关键词：</h4><p>字符串哈希</p><h4 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h4><p>异或值为0则表示切出的字符串的值和前n个字符串的值相等，因此对于每个字符串从后往前计算后缀的值并更新原字符串的值。即将01串视为大整数，根据更新后该位是否为01选择是否加上该位的值。判断后缀的值是否与更新后的值相同即可。复杂度$O(|S|)$。</p><figure class="highlight C++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> base=<span class="hljs-number">131</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br>ll p[maxn],ans;<br><span class="hljs-keyword">int</span> is[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;maxn;i++) p[i]=(p[i<span class="hljs-number">-1</span>]*base)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(is[x]) ans=(ans-p[x]+mod)%mod;<br>    <span class="hljs-keyword">else</span> ans=(ans+p[x])%mod;<br>    is[x]^=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;s(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">string</span>&amp; x:s) <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">string</span> x:s)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;x.length();i++)&#123;<br>            <span class="hljs-keyword">if</span>(x[i]==<span class="hljs-string">'1'</span>) add(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">string</span> x:s)&#123;<br>        ll tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x.length()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            tmp=(tmp*base)%mod;<br>            <span class="hljs-keyword">if</span>(x[i]==<span class="hljs-string">'1'</span>) &#123;<br>                add(i);<br>                tmp=(tmp+<span class="hljs-number">1</span>)%mod;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp==ans) cnt++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;x.length();i++)&#123;<br>            <span class="hljs-keyword">if</span>(x[i]==<span class="hljs-string">'1'</span>) add(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="hljs-string">'\n'</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    init();<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-comment">//cin&gt;&gt;_;</span><br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020-2021 ICPC, NERC部分题解</title>
    <link href="/2021/01/10/icpc_nerc/"/>
    <url>/2021/01/10/icpc_nerc/</url>
    
    <content type="html"><![CDATA[<h1 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a><a href="https://codeforces.com/contest/1468" target="_blank" rel="noopener">比赛链接</a></h1><h1 id="A：LaIS"><a href="#A：LaIS" class="headerlink" title="A：LaIS"></a>A：<a href="https://codeforces.com/contest/1468/problem/A" target="_blank" rel="noopener">LaIS</a></h1><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给出一个序列，问能否找出一些点，使得相邻两个数的最小值组成的序列非递减。</p><h4 id="关键词："><a href="#关键词：" class="headerlink" title="关键词："></a>关键词：</h4><p>dp、线段树</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>首先考虑最长非递减子序列，每个数之间最多能够插入一个比两侧大的数，超过两个就不合法，可以手推或者脑补一下。因此在选择状态转移的时候如果有多个最大值，要选取下标最小的一个，思考一下，如果dp值相同，下标更小的数一定更大，因为后面有更大的数那么可以从这个数进行转移。所以用线段树维护两个数，第一个为dp值，第二个为该位置的值，用last数组表示上一次这个数出现的位置，如果这段区间内有比两侧的数都大的数，那么答案可以为+2，否则+1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> a[maxn],last[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> m[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) &#123;<br>            t[p]=<span class="hljs-number">0</span>;<br>            m[p]=l;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(p&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]&gt;=t[p&lt;&lt;<span class="hljs-number">1</span>]) m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> in,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            t[p]=max(t[p],v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(in&lt;=mid) update(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,in,v);<br>        <span class="hljs-keyword">else</span> update(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,in,v);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]&gt;=t[p&lt;&lt;<span class="hljs-number">1</span>]) m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-function">pii <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(qr&lt;ql) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r) <span class="hljs-keyword">return</span> &#123;t[p],m[p]&#125;;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pii res=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid)&#123;<br>            pii tmp=query(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr);<br>            <span class="hljs-keyword">if</span>(tmp.first&gt;res.first) res=tmp;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp.first==res.first&amp;&amp;tmp.second&gt;res.second) res=tmp;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(qr&gt;mid)&#123;<br>            pii tmp=query(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr);<br>            <span class="hljs-keyword">if</span>(tmp.first&gt;res.first) res=tmp;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp.first==res.first&amp;&amp;tmp.second&gt;res.second) res=tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;dp;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg2</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) &#123;<br>            t[p]=a[l];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(p&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(qr&lt;ql) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r) <span class="hljs-keyword">return</span> t[p];<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid) res=max(res,query(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr));<br>        <span class="hljs-keyword">if</span>(qr&gt;mid) res=max(res,query(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dp.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    t.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        pii res=dp.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,a[i]);<br>        <span class="hljs-keyword">if</span>(res.first==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(t.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,i)&gt;a[i]) res.first++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(t.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,last[res.second],i)&gt;a[i]) res.first++;<br>        &#125;<br>        dp.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,a[i],res.first+<span class="hljs-number">1</span>);<br>        last[a[i]]=i;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dp.t[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H：K-and-Medians"><a href="#H：K-and-Medians" class="headerlink" title="H：K and Medians"></a>H：<a href="https://codeforces.com/contest/1468/problem/H" target="_blank" rel="noopener">K and Medians</a></h1><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>给出一个1到n的序列，以及一个b序列，每次操作可以选择k个数，k为奇数，将这些数中除了中位数外的数消去，问能否让这个序列转化为b序列。</p><h4 id="关键词：-1"><a href="#关键词：-1" class="headerlink" title="关键词："></a>关键词：</h4><p>思维</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>一个比较显然的结论，如果存在一个不能被消去的数他的左边和右边至少有(k-1)/2个要消去的数，且要消去的总数是(k-1)的倍数，那么一定为yes。脑补一下，如果要消去的数大于k-1个，那么可以把要消的数作为中位数，不停消去直到最后一个不为要消去的数满足两侧都为(k-1)/2个要消去的数收尾即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,k,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v,vis(n);<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        vis[x<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>            v.push_back(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k/<span class="hljs-number">2</span>;i&lt;v.size();i++)&#123;<br>        <span class="hljs-keyword">if</span>(v.size()%(k<span class="hljs-number">-1</span>)==<span class="hljs-number">0</span>&amp;&amp;v[i]!=v[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>&amp;&amp;v.size()-i&gt;=k/<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES\n"</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO\n"</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="M：Similar-Sets"><a href="#M：Similar-Sets" class="headerlink" title="M：Similar Sets"></a>M：<a href="https://codeforces.com/contest/1468/problem/M" target="_blank" rel="noopener">Similar Sets</a></h1><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>给出n个数组，每个数组有一些数，问能否找到两个数组至少有两个数相同？</p><h4 id="关键词：-2"><a href="#关键词：-2" class="headerlink" title="关键词："></a>关键词：</h4><p>分块</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>观察数据范围，数和数组的个数不超过1e5，可以发现当一个数组中有很多数时，那么数组个数肯定不会很多，因此可以根据sqrt(n)将数组划分为两块，每个大数组和其他的数组进行比较，不会超过 $sqrt(n) \times n$次就可以完成查找。小数组之间怎么比较呢？对于每个数可以将比这个数大的数放到数组里，如果一个数对应的数组中出现了两个相同的数且来自不同的数组，那么即查找成功，因为数字总数不会超过n，且每个数在数组中最多有sqrt(n)个数比他大，因此比较次数不超过$sqrt(n) \times n$次，最终能在$sqrt(n) \times n$的复杂度内求解。<br>比较套路的题，主要思想为按数据规模分类讨论，不同大小的数组用不同的处理方式。比较需要注意的是初始化以及垃圾回收，这部分容易超时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v[maxn],a,b,ve;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    a.clear();b.clear();ve.clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        v[i].clear();<br>        <span class="hljs-keyword">int</span> x;<span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        <span class="hljs-keyword">while</span>(x--)&#123;<br>            <span class="hljs-keyword">int</span> y;<span class="hljs-built_in">cin</span>&gt;&gt;y;<br>            v[i].push_back(y);<br>            ve.push_back(y);<br>        &#125;<br>        sort(v[i].begin(),v[i].end());<br>        v[i].erase(unique(v[i].begin(),v[i].end()),v[i].end());<br>    &#125;<br>    sort(ve.begin(),ve.end());<br>    ve.erase(unique(ve.begin(),ve.end()),ve.end());<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;w(ve.size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vis(ve.size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp; j : v[i])<br>            j=lower_bound(ve.begin(),ve.end(),j)-ve.begin()+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> sz=<span class="hljs-built_in">sqrt</span>(ve.size());<br>    <span class="hljs-built_in">vector</span>&lt;pii&gt;c[ve.size()+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i].size()&gt;sz) a.push_back(i);<br>        <span class="hljs-keyword">else</span> b.push_back(i);<br>    &#125;<br>    fill(w.begin(),w.end(),<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.size();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[a[i]]) w[j]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;a.size();j++)&#123;<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k:v[a[j]]) <span class="hljs-keyword">if</span>(w[k]) cnt++;<br>            <span class="hljs-keyword">if</span>(cnt&gt;=<span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;a[j]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;b.size();j++)&#123;<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k:v[b[j]]) <span class="hljs-keyword">if</span>(w[k]) cnt++;<br>            <span class="hljs-keyword">if</span>(cnt&gt;=<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;b[j]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[a[i]]) w[j]=<span class="hljs-number">0</span>;<br>    &#125;<br>    fill(w.begin(),w.end(),<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:b)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;v[i].size();k++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> kk=k+<span class="hljs-number">1</span>;kk&lt;v[i].size();kk++)&#123;<br>                <span class="hljs-keyword">if</span>(v[i][kk]&gt;v[i][k]) c[v[i][k]].push_back(&#123;v[i][kk],i&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:b)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[i])&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                vis[j]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(pii k:c[j])&#123;<br>                    <span class="hljs-keyword">if</span>(w[k.first])&#123;<br>                        <span class="hljs-keyword">for</span>(pii kk:c[j])&#123;<br>                            <span class="hljs-keyword">if</span>(kk.first==k.first)&#123;<br>                                <span class="hljs-built_in">cout</span>&lt;&lt;kk.second&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;k.second&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                                <span class="hljs-keyword">return</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    w[k.first]=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(pii k:c[j]) w[k.first]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"-1\n"</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
